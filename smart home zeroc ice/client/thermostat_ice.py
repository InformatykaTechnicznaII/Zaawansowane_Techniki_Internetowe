# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `thermostat.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ThermostatModule
_M_ThermostatModule = Ice.openModule('ThermostatModule')
__name__ = 'ThermostatModule'

if 'NoInput' not in _M_ThermostatModule.__dict__:
    _M_ThermostatModule.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::ThermostatModule::NoInput'

    _M_ThermostatModule._t_NoInput = IcePy.defineException('::ThermostatModule::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_ThermostatModule._t_NoInput

    _M_ThermostatModule.NoInput = NoInput
    del NoInput

_M_ThermostatModule._t_Thermostat = IcePy.defineValue('::ThermostatModule::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_ThermostatModule.__dict__:
    _M_ThermostatModule.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_ThermostatModule.Thermostat._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_ThermostatModule.Thermostat._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ThermostatModule.Thermostat._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_ThermostatModule.Thermostat._op_getTemperature.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_ThermostatModule.Thermostat._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_ThermostatModule.Thermostat._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_ThermostatModule.Thermostat._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_ThermostatModule.Thermostat._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ThermostatModule.ThermostatPrx.ice_checkedCast(proxy, '::ThermostatModule::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ThermostatModule.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ThermostatModule::Thermostat'
    _M_ThermostatModule._t_ThermostatPrx = IcePy.defineProxy('::ThermostatModule::Thermostat', ThermostatPrx)

    _M_ThermostatModule.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_ThermostatModule.Thermostat = Ice.createTempClass()
    class Thermostat(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ThermostatModule::Thermostat')

        def ice_id(self, current=None):
            return '::ThermostatModule::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::ThermostatModule::Thermostat'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ThermostatModule._t_ThermostatDisp)

        __repr__ = __str__

    _M_ThermostatModule._t_ThermostatDisp = IcePy.defineClass('::ThermostatModule::Thermostat', Thermostat, (), None, ())
    Thermostat._ice_type = _M_ThermostatModule._t_ThermostatDisp

    Thermostat._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Thermostat._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_ThermostatModule.Thermostat = Thermostat
    del Thermostat

# End of module ThermostatModule
