# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `bulb.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module BulbModule
_M_BulbModule = Ice.openModule('BulbModule')
__name__ = 'BulbModule'

if 'NoInput' not in _M_BulbModule.__dict__:
    _M_BulbModule.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::BulbModule::NoInput'

    _M_BulbModule._t_NoInput = IcePy.defineException('::BulbModule::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_BulbModule._t_NoInput

    _M_BulbModule.NoInput = NoInput
    del NoInput

if 'Colour' not in _M_BulbModule.__dict__:
    _M_BulbModule.Colour = Ice.createTempClass()
    class Colour(object):
        def __init__(self, red=0, green=0, blue=0):
            self.red = red
            self.green = green
            self.blue = blue

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.red)
            _h = 5 * _h + Ice.getHash(self.green)
            _h = 5 * _h + Ice.getHash(self.blue)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_BulbModule.Colour):
                return NotImplemented
            else:
                if self.red is None or other.red is None:
                    if self.red != other.red:
                        return (-1 if self.red is None else 1)
                else:
                    if self.red < other.red:
                        return -1
                    elif self.red > other.red:
                        return 1
                if self.green is None or other.green is None:
                    if self.green != other.green:
                        return (-1 if self.green is None else 1)
                else:
                    if self.green < other.green:
                        return -1
                    elif self.green > other.green:
                        return 1
                if self.blue is None or other.blue is None:
                    if self.blue != other.blue:
                        return (-1 if self.blue is None else 1)
                else:
                    if self.blue < other.blue:
                        return -1
                    elif self.blue > other.blue:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_BulbModule._t_Colour)

        __repr__ = __str__

    _M_BulbModule._t_Colour = IcePy.defineStruct('::BulbModule::Colour', Colour, (), (
        ('red', (), IcePy._t_int),
        ('green', (), IcePy._t_int),
        ('blue', (), IcePy._t_int)
    ))

    _M_BulbModule.Colour = Colour
    del Colour

_M_BulbModule._t_Bulb = IcePy.defineValue('::BulbModule::Bulb', Ice.Value, -1, (), False, True, None, ())

if 'BulbPrx' not in _M_BulbModule.__dict__:
    _M_BulbModule.BulbPrx = Ice.createTempClass()
    class BulbPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_BulbModule.Bulb._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_BulbModule.Bulb._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BulbModule.Bulb._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_BulbModule.Bulb._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_BulbModule.Bulb._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_BulbModule.Bulb._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BulbModule.Bulb._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_BulbModule.Bulb._op_turnOff.end(self, _r)

        def changeColour(self, colour, context=None):
            return _M_BulbModule.Bulb._op_changeColour.invoke(self, ((colour, ), context))

        def changeColourAsync(self, colour, context=None):
            return _M_BulbModule.Bulb._op_changeColour.invokeAsync(self, ((colour, ), context))

        def begin_changeColour(self, colour, _response=None, _ex=None, _sent=None, context=None):
            return _M_BulbModule.Bulb._op_changeColour.begin(self, ((colour, ), _response, _ex, _sent, context))

        def end_changeColour(self, _r):
            return _M_BulbModule.Bulb._op_changeColour.end(self, _r)

        def isTurnedOn(self, context=None):
            return _M_BulbModule.Bulb._op_isTurnedOn.invoke(self, ((), context))

        def isTurnedOnAsync(self, context=None):
            return _M_BulbModule.Bulb._op_isTurnedOn.invokeAsync(self, ((), context))

        def begin_isTurnedOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BulbModule.Bulb._op_isTurnedOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isTurnedOn(self, _r):
            return _M_BulbModule.Bulb._op_isTurnedOn.end(self, _r)

        def getColour(self, context=None):
            return _M_BulbModule.Bulb._op_getColour.invoke(self, ((), context))

        def getColourAsync(self, context=None):
            return _M_BulbModule.Bulb._op_getColour.invokeAsync(self, ((), context))

        def begin_getColour(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_BulbModule.Bulb._op_getColour.begin(self, ((), _response, _ex, _sent, context))

        def end_getColour(self, _r):
            return _M_BulbModule.Bulb._op_getColour.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_BulbModule.BulbPrx.ice_checkedCast(proxy, '::BulbModule::Bulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_BulbModule.BulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::BulbModule::Bulb'
    _M_BulbModule._t_BulbPrx = IcePy.defineProxy('::BulbModule::Bulb', BulbPrx)

    _M_BulbModule.BulbPrx = BulbPrx
    del BulbPrx

    _M_BulbModule.Bulb = Ice.createTempClass()
    class Bulb(Ice.Object):

        def ice_ids(self, current=None):
            return ('::BulbModule::Bulb', '::Ice::Object')

        def ice_id(self, current=None):
            return '::BulbModule::Bulb'

        @staticmethod
        def ice_staticId():
            return '::BulbModule::Bulb'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def changeColour(self, colour, current=None):
            raise NotImplementedError("servant method 'changeColour' not implemented")

        def isTurnedOn(self, current=None):
            raise NotImplementedError("servant method 'isTurnedOn' not implemented")

        def getColour(self, current=None):
            raise NotImplementedError("servant method 'getColour' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_BulbModule._t_BulbDisp)

        __repr__ = __str__

    _M_BulbModule._t_BulbDisp = IcePy.defineClass('::BulbModule::Bulb', Bulb, (), None, ())
    Bulb._ice_type = _M_BulbModule._t_BulbDisp

    Bulb._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Bulb._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Bulb._op_changeColour = IcePy.Operation('changeColour', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_BulbModule._t_Colour, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Bulb._op_isTurnedOn = IcePy.Operation('isTurnedOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Bulb._op_getColour = IcePy.Operation('getColour', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_BulbModule._t_Colour, False, 0), ())

    _M_BulbModule.Bulb = Bulb
    del Bulb

# End of module BulbModule
