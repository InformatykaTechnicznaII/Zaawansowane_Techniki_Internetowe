# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `speaker.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SpeakerModule
_M_SpeakerModule = Ice.openModule('SpeakerModule')
__name__ = 'SpeakerModule'

if 'NoInput' not in _M_SpeakerModule.__dict__:
    _M_SpeakerModule.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SpeakerModule::NoInput'

    _M_SpeakerModule._t_NoInput = IcePy.defineException('::SpeakerModule::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_SpeakerModule._t_NoInput

    _M_SpeakerModule.NoInput = NoInput
    del NoInput

if 'Track' not in _M_SpeakerModule.__dict__:
    _M_SpeakerModule.Track = Ice.createTempClass()
    class Track(object):
        def __init__(self, artist='', title=''):
            self.artist = artist
            self.title = title

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.title)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SpeakerModule.Track):
                return NotImplemented
            else:
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SpeakerModule._t_Track)

        __repr__ = __str__

    _M_SpeakerModule._t_Track = IcePy.defineStruct('::SpeakerModule::Track', Track, (), (
        ('artist', (), IcePy._t_string),
        ('title', (), IcePy._t_string)
    ))

    _M_SpeakerModule.Track = Track
    del Track

_M_SpeakerModule._t_Speaker = IcePy.defineValue('::SpeakerModule::Speaker', Ice.Value, -1, (), False, True, None, ())

if 'SpeakerPrx' not in _M_SpeakerModule.__dict__:
    _M_SpeakerModule.SpeakerPrx = Ice.createTempClass()
    class SpeakerPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SpeakerModule.Speaker._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SpeakerModule.Speaker._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SpeakerModule.Speaker._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SpeakerModule.Speaker._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SpeakerModule.Speaker._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SpeakerModule.Speaker._op_turnOff.end(self, _r)

        def play(self, context=None):
            return _M_SpeakerModule.Speaker._op_play.invoke(self, ((), context))

        def playAsync(self, context=None):
            return _M_SpeakerModule.Speaker._op_play.invokeAsync(self, ((), context))

        def begin_play(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_play.begin(self, ((), _response, _ex, _sent, context))

        def end_play(self, _r):
            return _M_SpeakerModule.Speaker._op_play.end(self, _r)

        def pause(self, context=None):
            return _M_SpeakerModule.Speaker._op_pause.invoke(self, ((), context))

        def pauseAsync(self, context=None):
            return _M_SpeakerModule.Speaker._op_pause.invokeAsync(self, ((), context))

        def begin_pause(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_pause.begin(self, ((), _response, _ex, _sent, context))

        def end_pause(self, _r):
            return _M_SpeakerModule.Speaker._op_pause.end(self, _r)

        def setTrack(self, track, context=None):
            return _M_SpeakerModule.Speaker._op_setTrack.invoke(self, ((track, ), context))

        def setTrackAsync(self, track, context=None):
            return _M_SpeakerModule.Speaker._op_setTrack.invokeAsync(self, ((track, ), context))

        def begin_setTrack(self, track, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_setTrack.begin(self, ((track, ), _response, _ex, _sent, context))

        def end_setTrack(self, _r):
            return _M_SpeakerModule.Speaker._op_setTrack.end(self, _r)

        def getCurrentTrack(self, context=None):
            return _M_SpeakerModule.Speaker._op_getCurrentTrack.invoke(self, ((), context))

        def getCurrentTrackAsync(self, context=None):
            return _M_SpeakerModule.Speaker._op_getCurrentTrack.invokeAsync(self, ((), context))

        def begin_getCurrentTrack(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpeakerModule.Speaker._op_getCurrentTrack.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTrack(self, _r):
            return _M_SpeakerModule.Speaker._op_getCurrentTrack.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SpeakerModule.SpeakerPrx.ice_checkedCast(proxy, '::SpeakerModule::Speaker', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SpeakerModule.SpeakerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SpeakerModule::Speaker'
    _M_SpeakerModule._t_SpeakerPrx = IcePy.defineProxy('::SpeakerModule::Speaker', SpeakerPrx)

    _M_SpeakerModule.SpeakerPrx = SpeakerPrx
    del SpeakerPrx

    _M_SpeakerModule.Speaker = Ice.createTempClass()
    class Speaker(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SpeakerModule::Speaker')

        def ice_id(self, current=None):
            return '::SpeakerModule::Speaker'

        @staticmethod
        def ice_staticId():
            return '::SpeakerModule::Speaker'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def play(self, current=None):
            raise NotImplementedError("servant method 'play' not implemented")

        def pause(self, current=None):
            raise NotImplementedError("servant method 'pause' not implemented")

        def setTrack(self, track, current=None):
            raise NotImplementedError("servant method 'setTrack' not implemented")

        def getCurrentTrack(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTrack' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SpeakerModule._t_SpeakerDisp)

        __repr__ = __str__

    _M_SpeakerModule._t_SpeakerDisp = IcePy.defineClass('::SpeakerModule::Speaker', Speaker, (), None, ())
    Speaker._ice_type = _M_SpeakerModule._t_SpeakerDisp

    Speaker._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Speaker._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Speaker._op_play = IcePy.Operation('play', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Speaker._op_pause = IcePy.Operation('pause', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Speaker._op_setTrack = IcePy.Operation('setTrack', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SpeakerModule._t_Track, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Speaker._op_getCurrentTrack = IcePy.Operation('getCurrentTrack', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SpeakerModule._t_Track, False, 0), ())

    _M_SpeakerModule.Speaker = Speaker
    del Speaker

# End of module SpeakerModule
